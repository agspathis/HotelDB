package gui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JOptionPane;
import javax.swing.JTextArea;

import database.DatabaseSelect;
import database.DatabaseUpdate;

/**
 *
 * @author 
 */
public class PaymentWindow extends javax.swing.JFrame {

    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private JTextArea textArea;
	
	/**
     * Creates new form PaymentWindow
     */
    public PaymentWindow(JTextArea textArea) {
    	this.textArea = textArea;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        roomTF = new javax.swing.JTextField();
        payedButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        fromTF = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        toTF = new javax.swing.JTextField();
        currentInButton = new javax.swing.JButton();
        incomeButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Payment");
        setResizable(false);

        jLabel1.setText("Room");

        roomTF.setColumns(5);

        payedButton.setText("Payed");
        payedButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				payed();
				
			}
		});

        jLabel2.setText("From");

        fromTF.setColumns(11);

        jLabel3.setText("To");

        toTF.setColumns(11);

        currentInButton.setText("Current In");
        currentInButton.setToolTipText("shows current in unpayed rooms");
        currentInButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				showCurrentlyIn();
				
			}
		});

        incomeButton.setText("Income");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(fromTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2))
                                .addGap(25, 25, 25)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(toTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(33, 33, 33)
                                .addComponent(roomTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(payedButton))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(incomeButton)))
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(currentInButton)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(roomTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(payedButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fromTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(incomeButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(currentInButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

    private void payed(){
    	// check text field
		if (roomTF.getText().length() == 0) {
			JOptionPane.showMessageDialog(null, "Fill room's text field",
					"Empty text field", JOptionPane.INFORMATION_MESSAGE);
			return;
		}
		
		if(roomPaymentState()){
			if(servicesPaymentState()){
				// do updates
				rentalUpdatePayed();
			}
		}
		
    }
    
    private boolean rentalUpdatePayed(){
    	
		
		String PAYEDUPDATEQUERY = 
				"UPDATE Rental " +
				"SET payed = 1 " +
				"WHERE idRoom = '"+roomTF.getText()+"' AND " +
						"checkOut = 0 AND checkIn = 1 AND payed = 0";
		
		DatabaseUpdate payedUpdate = new DatabaseUpdate(textArea, 
				PAYEDUPDATEQUERY);
		
		if (!(payedUpdate.getConnectionState() == true
				&& payedUpdate.execute())) {
			JOptionPane.showMessageDialog(null, "Payed update unable",
					"Payed error", JOptionPane.ERROR_MESSAGE);
			payedUpdate.closeConnection();
			return false;
		} else{
			payedUpdate.closeConnection();
			return true;
		}
		
    }
    
    private boolean roomPaymentState(){
    	
    	String ROOMPAYMENTSTATEQUERY = 
    			"SELECT firstName, lastName, idRoom, " +
    			"dateDiff(departureDate,arrivalDate)*dayPrice AS 'Room Price', " +
    			"sum(discount) AS 'Total discount', " +
    			"dateDiff(departureDate,arrivalDate)*dayPrice*(1-sum(discount)) AS 'Total' " +
    			"FROM ((Rental NATURAL JOIN Customer) NATURAL JOIN " +
    			"(Offer NATURAL JOIN Discount)) " +
    			"WHERE idRoom = '"+roomTF.getText()+"' AND checkOut = 0 AND " +
    					"checkIn = 1 AND payed = 0";
    	
    	
    	DatabaseSelect roomPayment = new DatabaseSelect(textArea, 
    			ROOMPAYMENTSTATEQUERY);
    	
    	if(roomPayment.getConnectionState()==true && roomPayment.execute()){
    		roomPayment.closeConnection();
        	return true;
    	}else{
    		JOptionPane.showMessageDialog(null, "Rooms payment unable",
					"Room error", JOptionPane.ERROR_MESSAGE);
    		roomPayment.closeConnection();
    		return false;
    	}
    }
    
    private boolean servicesPaymentState(){
    	String SERVICEPAYMENTSTATEQUERY = 
    			"SELECT firstName, lastName, idRoom, " +
    			"sum(Service.price) AS 'Total Service Price' " +
    			"FROM ((Rental NATURAL JOIN Customer) NATURAL JOIN " +
    			"(Trade NATURAL JOIN Service)) " +
    			"WHERE idRoom = '"+roomTF.getText()+"' AND checkOut = 0 AND " +
    					"checkIn = 1";
    	
    	DatabaseSelect servicePayment = new DatabaseSelect(textArea, 
    			SERVICEPAYMENTSTATEQUERY);
    	
    	if((servicePayment.getConnectionState()==true && servicePayment.execute())){
    		servicePayment.closeConnection();
    		return true;
    	}else{
    		JOptionPane.showMessageDialog(null, "Service payment unable",
					"Service error", JOptionPane.ERROR_MESSAGE);
    		servicePayment.closeConnection();
    		return false;
    	}
    }
    
    private void showCurrentlyIn(){
    	String CURRENTPAYMENTSTATEQUERY = 
    			"SELECT firstName, lastName, idRoom, " +
    			"dateDiff(current_date(),arrivalDate)*dayPrice AS 'Room Price', " +
    			"sum(discount) AS 'Total discount', " +
    			"dateDiff(current_date(),arrivalDate)*dayPrice*(1-sum(discount)) AS 'Total' " +
    			"FROM ((Rental NATURAL JOIN Customer) NATURAL JOIN " +
    			"(Offer NATURAL JOIN Discount)) " +
    			"WHERE checkOut = 0 AND checkIn = 1 AND payed = 0";
    	
    	DatabaseSelect currentState = new DatabaseSelect(textArea, 
    			CURRENTPAYMENTSTATEQUERY);
    	
    	if(currentState.getConnectionState()==true && currentState.execute()){
    		currentState.closeConnection();
    	}else{
    		JOptionPane.showMessageDialog(null, "Rooms state unable",
					"Room state error", JOptionPane.ERROR_MESSAGE);
    		currentState.closeConnection();
    	}
    }
    
    // Variables declaration - do not modify                     
    private javax.swing.JTextField fromTF;
    private javax.swing.JButton currentInButton;
    private javax.swing.JButton incomeButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JButton payedButton;
    private javax.swing.JTextField roomTF;
    private javax.swing.JTextField toTF;
    // End of variables declaration                   
}
